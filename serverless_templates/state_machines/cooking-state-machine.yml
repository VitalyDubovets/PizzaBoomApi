id: CookingStateMachine
name: cookingStateMachine-${self:service}-${self:provider.stage}
role:
  Fn::GetAtt: [StepFunctionsExecutionRole, Arn]
dependsOn:
  - StepFunctionsExecutionRole
  - ExecutionRole
definition:
  Comment: "Cooking State Machine"
  StartAt: PreparationIngredients
  States:

    PreparationIngredients:
      Type: Parallel
      ResultPath: "$.results"
      Branches:
        - StartAt: PreparingDough
          States:
            PreparingDough:
              Type: Wait
              Seconds: 50
              End: True
        - StartAt: PreparingFilling
          States:
            PreparingFilling:
              Type: Task
              Resource: "arn:aws:states:::states:startExecution.sync:2"
              Parameters:
                StateMachineArn:
                  Ref: PreparingFillingStateMachine
              End: True
              Retry:
                - ErrorEquals:
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                  IntervalSeconds: 2
                  MaxAttempts: 2
                  BackoffRate: 2
      Next: BakingPizza

    BakingPizza:
      Type: Wait
      Seconds: 30
      Next: EvaluationQuality

    EvaluationQuality:
      Type: Task
      Resource:
        Fn::GetAtt: [evaluateQuality, Arn]
      Next: CheckingTheQuality
      Retry:
        - ErrorEquals:
            - Lambda.ServiceException
            - Lambda.AWSLambdaException
            - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 2
          BackoffRate: 2

    CheckingTheQuality:
      Type: Choice
      Choices:
        - Variable: "$.goodQuality"
          BooleanEquals: True
          Next: WaitForReceivePizzaOrder
        - Variable: "$.goodQuality"
          BooleanEquals: False
          Next: PreparationIngredients

    WaitForReceivePizzaOrder:
      Type: Task
      Resource: "arn:aws:states:::lambda:invoke.waitForTaskToken"
      Parameters:
        FunctionName:
          Fn::GetAtt: [waitForReceivePizzaOrder, Arn]
        Payload:
          task_token.$: "$$.Task.Token"
          pizza_order_id.$: "$$.Execution.Input.pizza_order_id"
      Next: SuccessReceivePizza
      TimeoutSeconds: 300
      Retry:
        - ErrorEquals:
            - Lambda.ServiceException
            - Lambda.AWSLambdaException
            - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 2
          BackoffRate: 2
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: "$.error_info"
          Next: NotReceivePizzaOrder
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.error_info"
          Next: PizzaOrderFailed

    SuccessReceivePizza:
      Type: Succeed

    NotReceivePizzaOrder:
      Type: Task
      Resource:
        Fn::GetAtt: [failReceivePizzaOrder, Arn]
      Next: FailReceivePizzaOrder
      Retry:
        - ErrorEquals:
            - Lambda.ServiceException
            - Lambda.AWSLambdaException
            - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 2
          BackoffRate: 2

    FailReceivePizzaOrder:
      Type: Fail
      Cause: Timed out'

    PizzaOrderFailed:
      Type: Task
      Next: PizzaOrderStateMachineFail
      Parameters:
        error_info.$: "$.error_info"
        pizza_order_id.$: "$$.Execution.Input.pizza_order_id"
      Resource:
        Fn::GetAtt: [pizzaOrderFailed ,Arn]
      Retry:
        - ErrorEquals:
            - Lambda.ServiceException
            - Lambda.AWSLambdaException
            - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 2
          BackoffRate: 2

    PizzaOrderStateMachineFail:
      Type: Fail