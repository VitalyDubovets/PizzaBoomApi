service: pizza-boom

provider:
  name: aws
  runtime: python3.8
  role: ExecutionRole
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    PIZZA_ORDER_STATE_MACHINE_ARN: ${self:custom.pizzaOrderStateMachineArn}
  logs:
    restApi: true
    httpApi: true
  httpApi:
    cors:
      allowedOrigins: "*"
      allowedHeaders:
        - Content-Type
        - Authorization
        - x-amz-date
        - x-api-key
        - x-amz-security-token
        - x-amz-user-agent
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PATCH
        - PUT
        - DELETE
        - HEAD
      allowCredentials: false
      #      exposedResponseHeaders:
      maxAge: 0 # In seconds

    authorizers:
      userJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ''
            - - 'https://cognito-idp.'
              - '${self:provider.region}'
              - '.amazonaws.com/'
              - Ref: CognitoUserPoolPizzaBoomUsers
        audience:
          - Ref:
              pizzaBoomUserPoolClient

package:
  individually: false
  exclude:
    - .git/**
    - .cache/**
    - venv/**
    - node_modules/**
    - .serverless/**

custom:
  config: ${file(settings_default.yml)}

  pythonRequirements:
    dockerizePip: true

  wsgi:
    app: pizza_boom.api.wsgi.app
    pythonBin: python3

  pizzaOrderStateMachineName: "cookingStateMachine-${self:service}-${opt:stage, self:provider.stage}"
  pizzaOrderStateMachineArn: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.pizzaOrderStateMachineName}"

plugins:
  - serverless-plugin-warmup
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-wsgi

functions:
  apiFlask:
    name: ${self:service}-${self:provider.stage}-api-flask
    handler: wsgi_handler.handler
    events:
      - httpApi:
          method: PATCH
          path: /api/v1/users/{proxy+}
          authorizer:
            name: userJwtAuthorizer

  createOrder:
    name: ${self:service}-${self:provider.stage}-api-create-order
    handler: pizza_boom/pizza_orders/lambda_functions/api/create_order.handler
    events:
      - httpApi:
          method: POST
          path: /api/v1/pizza-orders
          authorizer:
            name: userJwtAuthorizer

  cognitoTriggerCustomMessage:
    name: ${self:service}-${opt:stage, self:provider.stage}-custom-message-trigger
    handler: pizza_boom/auth/lambda_triggers/trigger_custom_message.handler
    events:
      - cognitoUserPool:
          pool: PizzaBoomUsers
          trigger: CustomMessage

  cognitoTriggerPostAuthentication:
    name: ${self:service}-${opt:stage, self:provider.stage}-post-authentication-trigger
    handler: pizza_boom/auth/lambda_triggers/trigger_post_authentication.handler
    events:
      - cognitoUserPool:
          pool: PizzaBoomUsers
          trigger: PostAuthentication

  cognitoTriggerPostConfirmation:
    name: ${self:service}-${opt:stage, self:provider.stage}-post-confirmation-trigger
    handler: pizza_boom/auth/lambda_triggers/trigger_post_confirmation.handler
    events:
      - cognitoUserPool:
          pool: PizzaBoomUsers
          trigger: PostConfirmation

  cognitoTriggerPreSignUp:
    name: ${self:service}-${opt:stage, self:provider.stage}-pre-sign-up-trigger
    handler: pizza_boom/auth/lambda_triggers/trigger_pre_sign_up.handler
    events:
      - cognitoUserPool:
          pool: PizzaBoomUsers
          trigger: PreSignUp

  evaluateQuality:
    name: ${self:service}-${opt:stage, self:provider.stage}-evaluate-quality-pizza
    handler: pizza_boom/pizza_orders/lambda_functions/lambda_step_functions/evaluate_quality.handler

stepFunctions:
  stateMachines:
    cooking:
      id: CookingStateMachine
      name: cookingStateMachine-${self:service}-${opt:stage, self:provider.stage}
      role:
        Fn::GetAtt: [StepFunctionsExecutionRole, Arn]
      dependsOn:
        - StepFunctionsExecutionRole
        - ExecutionRole
      definition:
        Comment: "Cooking State Machine"
        StartAt: PreparationIngredients
        States:
          PreparationIngredients:
            Type: Parallel
            ResultPath: "$.results"
            Branches:
              - StartAt: PreparingDough
                States:
                  PreparingDough:
                    Type: Wait
                    Seconds: 50
                    End: True
              - StartAt: PreparingFilling
                States:
                  PreparingFilling:
                    Type: Task
                    Resource: "arn:aws:states:::states:startExecution.sync:2"
                    Parameters:
                      StateMachineArn:
                        Ref: PreparingFillingStateMachine
                    End: True
            Next: BakingPizza
          BakingPizza:
            Type: Wait
            Seconds: 30
            Next: EvaluationQuality
          EvaluationQuality:
            Type: Task
            Resource:
              Fn::GetAtt: [evaluateQuality, Arn]
            Next: CheckingTheQuality
          CheckingTheQuality:
            Type: Choice
            Choices:
              - Variable: "$.goodQuality"
                BooleanEquals: True
                Next: SucceedCooking
              - Variable: "$.goodQuality"
                BooleanEquals: False
                Next: PreparationIngredients
          SucceedCooking:
            Type: Succeed

    preparingFillings:
      id: PreparingFillingStateMachine
      name: preparingFillingsStateMachine-${self:service}-${opt:stage, self:provider.stage}
      role:
        Fn::GetAtt: [StepFunctionsExecutionRole, Arn]
      dependsOn:
        - StepFunctionsExecutionRole
        - ExecutionRole
      definition:
        Comment: "Start to prepare filling"
        StartAt: WashingFood
        States:
          WashingFood:
            Type: Wait
            Seconds: 20
            Next: SlicingFood
          SlicingFood:
            Type: Wait
            Seconds: 30
            Next: SuccessPrepareFood
          SuccessPrepareFood:
            Type: Succeed

resources:
  Resources:
    dynamoPizzaBoomUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    dynamoPizzaBoomOrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-pizza-orders
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CognitoUserPoolPizzaBoomUsers:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
            TemporaryPasswordValidityDays: 14
        Schema:
          - Name: email
            AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Required: true
          - Name: username
            Required: false
            DeveloperOnlyAttribute: false
            Mutable: true
            AttributeDataType: String
          - Name: dynamo_user_id
            Required: false
            DeveloperOnlyAttribute: false
            Mutable: true
            AttributeDataType: String
        UserPoolName: ${self:service}-${self:provider.stage}-users-pool

    pizzaBoomUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - phone
          - openid
          - profile
          - aws.cognito.signin.user.admin
        CallbackURLs:
          - https://google.com
        ClientName: ${self:service}-users-app
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        RefreshTokenValidity: 15
        SupportedIdentityProviders:
          - COGNITO
        UserPoolId:
          Ref: CognitoUserPoolPizzaBoomUsers

    pizzaBoomUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: CognitoUserPoolPizzaBoomUsers
        Domain: "${self:provider.stage}-users-${self:service}"

    StepFunctionsExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-cook-pizza-spf-exec-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.#{AWS::Region}.amazonaws.com
                  - "lambda.amazonaws.com"
              Action: sts:AssumeRole
        Policies:
          - PolicyName: access-execution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - arn:aws:lambda
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - function:${self:service}-${opt:stage, self:provider.stage}-*
                - Effect: Allow
                  Action:
                    - events:PutTargets
                    - events:PutRule
                    - events:DescribeRule
                  Resource: arn:#{AWS::Partition}:events:#{AWS::Region}:#{AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
                - Effect: Allow
                  Action:
                    - states:StartExecution
                    - states:SendTaskSuccess
                    - states:SendTaskFailure
                    - states:GetActivityTask
                    - states:DescribeExecution
                    - states:StopExecution
                    - states:DescribeStateMachine
                    - states:UpdateStateMachine
                  Resource: '*'

    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-lambda-execution-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.#{AWS::Region}.amazonaws.com
                  - "lambda.amazonaws.com"
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
        Policies:
          - PolicyName: access-execution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:DeleteItem
                    - dynamodb:DescribeStream
                    - dynamodb:DescribeTable
                    - dynamodb:GetItem
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}*
                - Effect: Allow
                  Action:
                    - states:StartExecution
                    - states:SendTaskSuccess
                    - states:SendTaskFailure
                    - states:GetActivityTask
                    - states:DescribeExecution
                    - states:StopExecution
                    - states:DescribeStateMachine
                    - states:UpdateStateMachine
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminListGroupsForUser
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - cognito-idp:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - arn:aws:lambda
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - function:${self:service}-${opt:stage, self:provider.stage}-*