service: pizza-boom-sm

provider:
  name: aws
  runtime: python3.8
  role: ExecutionRole
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    PIZZA_ORDER_STATE_MACHINE_ARN: ${self:custom.pizzaOrderStateMachineArn}

package:
  individually: false
  exclude:
    - .git/**
    - .cache/**
    - venv/**
    - node_modules/**
    - .serverless/**

custom:
  config: ${file(settings_default.yml)}

  pythonRequirements:
    dockerizePip: true

  pizzaOrderStateMachineName: "cookingStateMachine-${self:service}-${opt:stage, self:provider.stage}"
  pizzaOrderStateMachineArn: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:custom.pizzaOrderStateMachineName}"

plugins:
  - serverless-plugin-warmup
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-step-functions

functions:
  failReceivePizzaOrder:
    name: ${self:service}-${opt:stage}-fail-receive-pizza-order
    handler: pizza_boom/pizza_orders/lambda_functions/lambda_step_functions/fail_receive_pizza_order.handler

  pizzaOrderFailed:
    name: ${self:service}-${opt:stage}-pizza-order-fail
    handler: pizza_boom/pizza_orders/lambda_functions/lambda_step_functions/order_failed.handler

  evaluateQuality:
    name: ${self:service}-${opt:stage}-evaluate-quality-pizza
    handler: pizza_boom/pizza_orders/lambda_functions/lambda_step_functions/evaluate_quality.handler

  waitForReceivePizzaOrder:
    name: ${self:service}-${opt:stage}-wait-for-receive-pizza-order
    handler: pizza_boom/pizza_orders/lambda_functions/lambda_step_functions/wait_for_receive_pizza_order.handler

stepFunctions:
  stateMachines:
    cooking:
      ${file(./serverless_templates/state_machines/cooking-state-machine.yml)}

    preparingFillings:
      ${file(./serverless_templates/state_machines/preparing-fillings-state-machine.yml)}

resources:
  Resources:
    StepFunctionsExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-cook-pizza-spf-exec-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.#{AWS::Region}.amazonaws.com
                  - "lambda.amazonaws.com"
              Action: sts:AssumeRole
        Policies:
          - PolicyName: access-execution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - arn:aws:lambda
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - function:${self:service}-${opt:stage, self:provider.stage}-*
                - Effect: Allow
                  Action:
                    - events:PutTargets
                    - events:PutRule
                    - events:DescribeRule
                  Resource: arn:#{AWS::Partition}:events:#{AWS::Region}:#{AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
                - Effect: Allow
                  Action:
                    - states:StartExecution
                    - states:SendTaskSuccess
                    - states:SendTaskFailure
                    - states:GetActivityTask
                    - states:DescribeExecution
                    - states:StopExecution
                    - states:DescribeStateMachine
                    - states:UpdateStateMachine
                  Resource: '*'

    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:service}-${self:provider.stage}-lambda-execution-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.#{AWS::Region}.amazonaws.com
                  - "lambda.amazonaws.com"
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
        Policies:
          - PolicyName: access-execution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:DeleteItem
                    - dynamodb:DescribeStream
                    - dynamodb:DescribeTable
                    - dynamodb:GetItem
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:*:*:table/${self:custom.config.PREFIX_TABLE}-${self:provider.stage}*
                - Effect: Allow
                  Action:
                    - states:StartExecution
                    - states:SendTaskSuccess
                    - states:SendTaskFailure
                    - states:GetActivityTask
                    - states:DescribeExecution
                    - states:StopExecution
                    - states:DescribeStateMachine
                    - states:UpdateStateMachine
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminListGroupsForUser
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - cognito-idp:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - arn:aws:lambda
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - function:${self:service}-${opt:stage, self:provider.stage}-*